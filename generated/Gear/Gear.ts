// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class GearCreated extends ethereum.Event {
  get params(): GearCreated__Params {
    return new GearCreated__Params(this);
  }
}

export class GearCreated__Params {
  _event: GearCreated;

  constructor(event: GearCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get modifiers(): Array<GearCreatedModifiersStruct> {
    return this._event.parameters[1].value.toTupleArray<
      GearCreatedModifiersStruct
    >();
  }

  get slot(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class GearCreatedModifiersStruct extends ethereum.Tuple {
  get stat(): i32 {
    return this[0].toI32();
  }

  get mod(): i32 {
    return this[1].toI32();
  }
}

export class GearEquipped extends ethereum.Event {
  get params(): GearEquipped__Params {
    return new GearEquipped__Params(this);
  }
}

export class GearEquipped__Params {
  _event: GearEquipped;

  constructor(event: GearEquipped) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gearId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GearMinted extends ethereum.Event {
  get params(): GearMinted__Params {
    return new GearMinted__Params(this);
  }
}

export class GearMinted__Params {
  _event: GearMinted;

  constructor(event: GearMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gearId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GearUnequipped extends ethereum.Event {
  get params(): GearUnequipped__Params {
    return new GearUnequipped__Params(this);
  }
}

export class GearUnequipped__Params {
  _event: GearUnequipped;

  constructor(event: GearUnequipped) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gearId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LootBoxCreated extends ethereum.Event {
  get params(): LootBoxCreated__Params {
    return new LootBoxCreated__Params(this);
  }
}

export class LootBoxCreated__Params {
  _event: LootBoxCreated;

  constructor(event: LootBoxCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get items(): Array<LootBoxCreatedItemsStruct> {
    return this._event.parameters[1].value.toTupleArray<
      LootBoxCreatedItemsStruct
    >();
  }

  get rangeMax(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LootBoxCreatedItemsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get rangeStart(): BigInt {
    return this[1].toBigInt();
  }

  get rangeEnd(): BigInt {
    return this[2].toBigInt();
  }
}

export class LootBoxOpened extends ethereum.Event {
  get params(): LootBoxOpened__Params {
    return new LootBoxOpened__Params(this);
  }
}

export class LootBoxOpened__Params {
  _event: LootBoxOpened;

  constructor(event: LootBoxOpened) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lootBoxId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get gearId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Gear__gearDataResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getModifierLength(): BigInt {
    return this.value0;
  }

  getSlot(): i32 {
    return this.value1;
  }
}

export class Gear__getGearModifiersResultValue0Struct extends ethereum.Tuple {
  get stat(): i32 {
    return this[0].toI32();
  }

  get mod(): i32 {
    return this[1].toI32();
  }
}

export class Gear__lootBoxItemsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get rangeStart(): BigInt {
    return this[1].toBigInt();
  }

  get rangeEnd(): BigInt {
    return this[2].toBigInt();
  }
}

export class Gear__lootBoxesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getCreatedBy(): Address {
    return this.value0;
  }

  getRangeMax(): BigInt {
    return this.value1;
  }

  getItemLength(): BigInt {
    return this.value2;
  }
}

export class Gear__readGearDataResultValue0Struct extends ethereum.Tuple {
  get stat(): i32 {
    return this[0].toI32();
  }

  get mod(): i32 {
    return this[1].toI32();
  }
}

export class Gear__readGearDataResult {
  value0: Array<Gear__readGearDataResultValue0Struct>;
  value1: i32;

  constructor(
    value0: Array<Gear__readGearDataResultValue0Struct>,
    value1: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Array<Gear__readGearDataResultValue0Struct> {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class Gear extends ethereum.SmartContract {
  static bind(address: Address): Gear {
    return new Gear("Gear", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gearCount(): BigInt {
    let result = super.call("gearCount", "gearCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gearCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gearCount", "gearCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gearData(id: BigInt): Gear__gearDataResult {
    let result = super.call("gearData", "gearData(uint256):(uint256,uint8)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return new Gear__gearDataResult(result[0].toBigInt(), result[1].toI32());
  }

  try_gearData(id: BigInt): ethereum.CallResult<Gear__gearDataResult> {
    let result = super.tryCall(
      "gearData",
      "gearData(uint256):(uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gear__gearDataResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGearModifiers(
    tokenId: BigInt
  ): Array<Gear__getGearModifiersResultValue0Struct> {
    let result = super.call(
      "getGearModifiers",
      "getGearModifiers(uint256):((uint8,uint8)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTupleArray<Gear__getGearModifiersResultValue0Struct>();
  }

  try_getGearModifiers(
    tokenId: BigInt
  ): ethereum.CallResult<Array<Gear__getGearModifiersResultValue0Struct>> {
    let result = super.tryCall(
      "getGearModifiers",
      "getGearModifiers(uint256):((uint8,uint8)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Gear__getGearModifiersResultValue0Struct>()
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootBoxCount(): BigInt {
    let result = super.call("lootBoxCount", "lootBoxCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lootBoxCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lootBoxCount", "lootBoxCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lootBoxItems(id: BigInt): Array<Gear__lootBoxItemsResultValue0Struct> {
    let result = super.call(
      "lootBoxItems",
      "lootBoxItems(uint256):((uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTupleArray<Gear__lootBoxItemsResultValue0Struct>();
  }

  try_lootBoxItems(
    id: BigInt
  ): ethereum.CallResult<Array<Gear__lootBoxItemsResultValue0Struct>> {
    let result = super.tryCall(
      "lootBoxItems",
      "lootBoxItems(uint256):((uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Gear__lootBoxItemsResultValue0Struct>()
    );
  }

  lootBoxes(lootBoxId: BigInt): Gear__lootBoxesResult {
    let result = super.call(
      "lootBoxes",
      "lootBoxes(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(lootBoxId)]
    );

    return new Gear__lootBoxesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_lootBoxes(lootBoxId: BigInt): ethereum.CallResult<Gear__lootBoxesResult> {
    let result = super.tryCall(
      "lootBoxes",
      "lootBoxes(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(lootBoxId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gear__lootBoxesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  readGearData(id: BigInt): Gear__readGearDataResult {
    let result = super.call(
      "readGearData",
      "readGearData(uint256):((uint8,uint8)[],uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new Gear__readGearDataResult(
      result[0].toTupleArray<Gear__readGearDataResultValue0Struct>(),
      result[1].toI32()
    );
  }

  try_readGearData(id: BigInt): ethereum.CallResult<Gear__readGearDataResult> {
    let result = super.tryCall(
      "readGearData",
      "readGearData(uint256):((uint8,uint8)[],uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gear__readGearDataResult(
        value[0].toTupleArray<Gear__readGearDataResultValue0Struct>(),
        value[1].toI32()
      )
    );
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenToGear(tokenId: BigInt): BigInt {
    let result = super.call("tokenToGear", "tokenToGear(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_tokenToGear(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToGear",
      "tokenToGear(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrf(): Address {
    let result = super.call("vrf", "vrf():(address)", []);

    return result[0].toAddress();
  }

  try_vrf(): ethereum.CallResult<Address> {
    let result = super.tryCall("vrf", "vrf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _vrf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _mintGearCall extends ethereum.Call {
  get inputs(): _mintGearCall__Inputs {
    return new _mintGearCall__Inputs(this);
  }

  get outputs(): _mintGearCall__Outputs {
    return new _mintGearCall__Outputs(this);
  }
}

export class _mintGearCall__Inputs {
  _call: _mintGearCall;

  constructor(call: _mintGearCall) {
    this._call = call;
  }

  get gearDataId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _mintGearCall__Outputs {
  _call: _mintGearCall;

  constructor(call: _mintGearCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateGearDataCall extends ethereum.Call {
  get inputs(): CreateGearDataCall__Inputs {
    return new CreateGearDataCall__Inputs(this);
  }

  get outputs(): CreateGearDataCall__Outputs {
    return new CreateGearDataCall__Outputs(this);
  }
}

export class CreateGearDataCall__Inputs {
  _call: CreateGearDataCall;

  constructor(call: CreateGearDataCall) {
    this._call = call;
  }

  get modifiers(): Array<CreateGearDataCallModifiersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CreateGearDataCallModifiersStruct
    >();
  }

  get slot(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CreateGearDataCall__Outputs {
  _call: CreateGearDataCall;

  constructor(call: CreateGearDataCall) {
    this._call = call;
  }
}

export class CreateGearDataCallModifiersStruct extends ethereum.Tuple {
  get stat(): i32 {
    return this[0].toI32();
  }

  get mod(): i32 {
    return this[1].toI32();
  }
}

export class CreateLootBoxCall extends ethereum.Call {
  get inputs(): CreateLootBoxCall__Inputs {
    return new CreateLootBoxCall__Inputs(this);
  }

  get outputs(): CreateLootBoxCall__Outputs {
    return new CreateLootBoxCall__Outputs(this);
  }
}

export class CreateLootBoxCall__Inputs {
  _call: CreateLootBoxCall;

  constructor(call: CreateLootBoxCall) {
    this._call = call;
  }

  get items(): Array<CreateLootBoxCallItemsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CreateLootBoxCallItemsStruct
    >();
  }

  get rangeMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateLootBoxCall__Outputs {
  _call: CreateLootBoxCall;

  constructor(call: CreateLootBoxCall) {
    this._call = call;
  }
}

export class CreateLootBoxCallItemsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get rangeStart(): BigInt {
    return this[1].toBigInt();
  }

  get rangeEnd(): BigInt {
    return this[2].toBigInt();
  }
}

export class OpenLootBoxCall extends ethereum.Call {
  get inputs(): OpenLootBoxCall__Inputs {
    return new OpenLootBoxCall__Inputs(this);
  }

  get outputs(): OpenLootBoxCall__Outputs {
    return new OpenLootBoxCall__Outputs(this);
  }
}

export class OpenLootBoxCall__Inputs {
  _call: OpenLootBoxCall;

  constructor(call: OpenLootBoxCall) {
    this._call = call;
  }

  get _lootBoxId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OpenLootBoxCall__Outputs {
  _call: OpenLootBoxCall;

  constructor(call: OpenLootBoxCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
