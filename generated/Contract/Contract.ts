// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DungeonLost extends ethereum.Event {
  get params(): DungeonLost__Params {
    return new DungeonLost__Params(this);
  }
}

export class DungeonLost__Params {
  _event: DungeonLost;

  constructor(event: DungeonLost) {
    this._event = event;
  }

  get dungeonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DungeonPlayed extends ethereum.Event {
  get params(): DungeonPlayed__Params {
    return new DungeonPlayed__Params(this);
  }
}

export class DungeonPlayed__Params {
  _event: DungeonPlayed;

  constructor(event: DungeonPlayed) {
    this._event = event;
  }

  get dungeonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DungeonWon extends ethereum.Event {
  get params(): DungeonWon__Params {
    return new DungeonWon__Params(this);
  }
}

export class DungeonWon__Params {
  _event: DungeonWon;

  constructor(event: DungeonWon) {
    this._event = event;
  }

  get dungeonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  dungeonCount(): BigInt {
    let result = super.call("dungeonCount", "dungeonCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dungeonCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dungeonCount", "dungeonCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dungeonOwner(param0: BigInt): Address {
    let result = super.call("dungeonOwner", "dungeonOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_dungeonOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dungeonOwner",
      "dungeonOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dungeonStatus(param0: BigInt): i32 {
    let result = super.call("dungeonStatus", "dungeonStatus(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_dungeonStatus(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "dungeonStatus",
      "dungeonStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gold(): Address {
    let result = super.call("gold", "gold():(address)", []);

    return result[0].toAddress();
  }

  try_gold(): ethereum.CallResult<Address> {
    let result = super.tryCall("gold", "gold():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vrf(): Address {
    let result = super.call("vrf", "vrf():(address)", []);

    return result[0].toAddress();
  }

  try_vrf(): ethereum.CallResult<Address> {
    let result = super.tryCall("vrf", "vrf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vrf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gold(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FinalizeDungeonCall extends ethereum.Call {
  get inputs(): FinalizeDungeonCall__Inputs {
    return new FinalizeDungeonCall__Inputs(this);
  }

  get outputs(): FinalizeDungeonCall__Outputs {
    return new FinalizeDungeonCall__Outputs(this);
  }
}

export class FinalizeDungeonCall__Inputs {
  _call: FinalizeDungeonCall;

  constructor(call: FinalizeDungeonCall) {
    this._call = call;
  }

  get dungeonId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeDungeonCall__Outputs {
  _call: FinalizeDungeonCall;

  constructor(call: FinalizeDungeonCall) {
    this._call = call;
  }
}

export class PlayDungeonCall extends ethereum.Call {
  get inputs(): PlayDungeonCall__Inputs {
    return new PlayDungeonCall__Inputs(this);
  }

  get outputs(): PlayDungeonCall__Outputs {
    return new PlayDungeonCall__Outputs(this);
  }
}

export class PlayDungeonCall__Inputs {
  _call: PlayDungeonCall;

  constructor(call: PlayDungeonCall) {
    this._call = call;
  }

  get party(): PlayDungeonCallPartyStruct {
    return changetype<PlayDungeonCallPartyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class PlayDungeonCall__Outputs {
  _call: PlayDungeonCall;

  constructor(call: PlayDungeonCall) {
    this._call = call;
  }
}

export class PlayDungeonCallPartyStruct extends ethereum.Tuple {
  get players(): Array<PlayDungeonCallPartyPlayersStruct> {
    return this[0].toTupleArray<PlayDungeonCallPartyPlayersStruct>();
  }

  get mode(): i32 {
    return this[1].toI32();
  }
}

export class PlayDungeonCallPartyPlayersStruct extends ethereum.Tuple {
  get playerSheet(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}
