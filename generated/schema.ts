// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contract", id.toString(), this);
    }
  }

  static load(id: string): Contract | null {
    return changetype<Contract | null>(store.get("Contract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value!.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value!.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }
}

export class PlayerClass extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlayerClass entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlayerClass must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlayerClass", id.toString(), this);
    }
  }

  static load(id: string): PlayerClass | null {
    return changetype<PlayerClass | null>(store.get("PlayerClass", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get playerClass(): string {
    let value = this.get("playerClass");
    return value!.toString();
  }

  set playerClass(value: string) {
    this.set("playerClass", Value.fromString(value));
  }

  get pointsToSpend(): i32 {
    let value = this.get("pointsToSpend");
    return value!.toI32();
  }

  set pointsToSpend(value: i32) {
    this.set("pointsToSpend", Value.fromI32(value));
  }

  get constitution(): i32 {
    let value = this.get("constitution");
    return value!.toI32();
  }

  set constitution(value: i32) {
    this.set("constitution", Value.fromI32(value));
  }

  get dexterity(): i32 {
    let value = this.get("dexterity");
    return value!.toI32();
  }

  set dexterity(value: i32) {
    this.set("dexterity", Value.fromI32(value));
  }

  get strength(): i32 {
    let value = this.get("strength");
    return value!.toI32();
  }

  set strength(value: i32) {
    this.set("strength", Value.fromI32(value));
  }

  get wisdom(): i32 {
    let value = this.get("wisdom");
    return value!.toI32();
  }

  set wisdom(value: i32) {
    this.set("wisdom", Value.fromI32(value));
  }

  get intelligence(): i32 {
    let value = this.get("intelligence");
    return value!.toI32();
  }

  set intelligence(value: i32) {
    this.set("intelligence", Value.fromI32(value));
  }

  get charisma(): i32 {
    let value = this.get("charisma");
    return value!.toI32();
  }

  set charisma(value: i32) {
    this.set("charisma", Value.fromI32(value));
  }

  get luck(): i32 {
    let value = this.get("luck");
    return value!.toI32();
  }

  set luck(value: i32) {
    this.set("luck", Value.fromI32(value));
  }

  get head(): string | null {
    let value = this.get("head");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set head(value: string | null) {
    if (!value) {
      this.unset("head");
    } else {
      this.set("head", Value.fromString(<string>value));
    }
  }

  get body(): string | null {
    let value = this.get("body");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set body(value: string | null) {
    if (!value) {
      this.unset("body");
    } else {
      this.set("body", Value.fromString(<string>value));
    }
  }

  get legs(): string | null {
    let value = this.get("legs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set legs(value: string | null) {
    if (!value) {
      this.unset("legs");
    } else {
      this.set("legs", Value.fromString(<string>value));
    }
  }

  get feet(): string | null {
    let value = this.get("feet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feet(value: string | null) {
    if (!value) {
      this.unset("feet");
    } else {
      this.set("feet", Value.fromString(<string>value));
    }
  }
}

export class Modifier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Modifier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Modifier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Modifier", id.toString(), this);
    }
  }

  static load(id: string): Modifier | null {
    return changetype<Modifier | null>(store.get("Modifier", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stat(): i32 {
    let value = this.get("stat");
    return value!.toI32();
  }

  set stat(value: i32) {
    this.set("stat", Value.fromI32(value));
  }

  get mod(): i32 {
    let value = this.get("mod");
    return value!.toI32();
  }

  set mod(value: i32) {
    this.set("mod", Value.fromI32(value));
  }
}

export class GearType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GearType entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GearType must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GearType", id.toString(), this);
    }
  }

  static load(id: string): GearType | null {
    return changetype<GearType | null>(store.get("GearType", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get modifiers(): Array<string> | null {
    let value = this.get("modifiers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set modifiers(value: Array<string> | null) {
    if (!value) {
      this.unset("modifiers");
    } else {
      this.set("modifiers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get slot(): i32 {
    let value = this.get("slot");
    return value!.toI32();
  }

  set slot(value: i32) {
    this.set("slot", Value.fromI32(value));
  }
}

export class Gear extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gear entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gear must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Gear", id.toString(), this);
    }
  }

  static load(id: string): Gear | null {
    return changetype<Gear | null>(store.get("Gear", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gearType(): string {
    let value = this.get("gearType");
    return value!.toString();
  }

  set gearType(value: string) {
    this.set("gearType", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class LootBox extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LootBox entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LootBox must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LootBox", id.toString(), this);
    }
  }

  static load(id: string): LootBox | null {
    return changetype<LootBox | null>(store.get("LootBox", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get rangeMax(): BigInt {
    let value = this.get("rangeMax");
    return value!.toBigInt();
  }

  set rangeMax(value: BigInt) {
    this.set("rangeMax", Value.fromBigInt(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class LootBoxItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LootBoxItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LootBoxItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LootBoxItem", id.toString(), this);
    }
  }

  static load(id: string): LootBoxItem | null {
    return changetype<LootBoxItem | null>(store.get("LootBoxItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gearItem(): string {
    let value = this.get("gearItem");
    return value!.toString();
  }

  set gearItem(value: string) {
    this.set("gearItem", Value.fromString(value));
  }

  get rangeStart(): BigInt {
    let value = this.get("rangeStart");
    return value!.toBigInt();
  }

  set rangeStart(value: BigInt) {
    this.set("rangeStart", Value.fromBigInt(value));
  }

  get rangeEnd(): BigInt {
    let value = this.get("rangeEnd");
    return value!.toBigInt();
  }

  set rangeEnd(value: BigInt) {
    this.set("rangeEnd", Value.fromBigInt(value));
  }
}

export class DungeonFinalized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DungeonFinalized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DungeonFinalized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DungeonFinalized", id.toString(), this);
    }
  }

  static load(id: string): DungeonFinalized | null {
    return changetype<DungeonFinalized | null>(
      store.get("DungeonFinalized", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dungeonId(): BigInt {
    let value = this.get("dungeonId");
    return value!.toBigInt();
  }

  set dungeonId(value: BigInt) {
    this.set("dungeonId", Value.fromBigInt(value));
  }

  get won(): boolean {
    let value = this.get("won");
    return value!.toBoolean();
  }

  set won(value: boolean) {
    this.set("won", Value.fromBoolean(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class DungeonPlayed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DungeonPlayed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DungeonPlayed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DungeonPlayed", id.toString(), this);
    }
  }

  static load(id: string): DungeonPlayed | null {
    return changetype<DungeonPlayed | null>(store.get("DungeonPlayed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dungeonId(): BigInt {
    let value = this.get("dungeonId");
    return value!.toBigInt();
  }

  set dungeonId(value: BigInt) {
    this.set("dungeonId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}
