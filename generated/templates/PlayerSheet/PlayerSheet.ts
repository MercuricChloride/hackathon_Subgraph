// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClassCreated extends ethereum.Event {
  get params(): ClassCreated__Params {
    return new ClassCreated__Params(this);
  }
}

export class ClassCreated__Params {
  _event: ClassCreated;

  constructor(event: ClassCreated) {
    this._event = event;
  }

  get className(): string {
    return this._event.parameters[0].value.toString();
  }

  get classAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GearEquipped extends ethereum.Event {
  get params(): GearEquipped__Params {
    return new GearEquipped__Params(this);
  }
}

export class GearEquipped__Params {
  _event: GearEquipped;

  constructor(event: GearEquipped) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gearContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get gearTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PlayerFinalized extends ethereum.Event {
  get params(): PlayerFinalized__Params {
    return new PlayerFinalized__Params(this);
  }
}

export class PlayerFinalized__Params {
  _event: PlayerFinalized;

  constructor(event: PlayerFinalized) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stats(): PlayerFinalizedStatsStruct {
    return changetype<PlayerFinalizedStatsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class PlayerFinalizedStatsStruct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PlayerLeveledUp extends ethereum.Event {
  get params(): PlayerLeveledUp__Params {
    return new PlayerLeveledUp__Params(this);
  }
}

export class PlayerLeveledUp__Params {
  _event: PlayerLeveledUp;

  constructor(event: PlayerLeveledUp) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stats(): PlayerLeveledUpStatsStruct {
    return changetype<PlayerLeveledUpStatsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class PlayerLeveledUpStatsStruct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PlayerMinted extends ethereum.Event {
  get params(): PlayerMinted__Params {
    return new PlayerMinted__Params(this);
  }
}

export class PlayerMinted__Params {
  _event: PlayerMinted;

  constructor(event: PlayerMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stats(): PlayerMintedStatsStruct {
    return changetype<PlayerMintedStatsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get playerClass(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get className(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class PlayerMintedStatsStruct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PlayerSheet__addModifierBonusResultValue0Struct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PlayerSheet__addModifierBonusInputPlayerStatStruct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PlayerSheet__addModifierBonusInputModStruct extends ethereum.Tuple {
  get stat(): i32 {
    return this[0].toI32();
  }

  get mod(): i32 {
    return this[1].toI32();
  }
}

export class PlayerSheet__getGearBonusResultValue0Struct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PlayerSheet__playerStatsResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;
  value9: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getConstitution(): i32 {
    return this.value0;
  }

  getDexterity(): i32 {
    return this.value1;
  }

  getStrength(): i32 {
    return this.value2;
  }

  getWisdom(): i32 {
    return this.value3;
  }

  getInteligence(): i32 {
    return this.value4;
  }

  getCharisma(): i32 {
    return this.value5;
  }

  getLuck(): i32 {
    return this.value6;
  }

  getLevel(): i32 {
    return this.value7;
  }

  getPointsToSpend(): i32 {
    return this.value8;
  }

  getXp(): BigInt {
    return this.value9;
  }
}

export class PlayerSheet extends ethereum.SmartContract {
  static bind(address: Address): PlayerSheet {
    return new PlayerSheet("PlayerSheet", address);
  }

  STARTING_POINTS(): i32 {
    let result = super.call("STARTING_POINTS", "STARTING_POINTS():(uint8)", []);

    return result[0].toI32();
  }

  try_STARTING_POINTS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "STARTING_POINTS",
      "STARTING_POINTS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  addModifierBonus(
    playerStat: PlayerSheet__addModifierBonusInputPlayerStatStruct,
    mod: PlayerSheet__addModifierBonusInputModStruct
  ): PlayerSheet__addModifierBonusResultValue0Struct {
    let result = super.call(
      "addModifierBonus",
      "addModifierBonus((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256),(uint8,uint8)):((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256))",
      [ethereum.Value.fromTuple(playerStat), ethereum.Value.fromTuple(mod)]
    );

    return changetype<PlayerSheet__addModifierBonusResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_addModifierBonus(
    playerStat: PlayerSheet__addModifierBonusInputPlayerStatStruct,
    mod: PlayerSheet__addModifierBonusInputModStruct
  ): ethereum.CallResult<PlayerSheet__addModifierBonusResultValue0Struct> {
    let result = super.tryCall(
      "addModifierBonus",
      "addModifierBonus((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256),(uint8,uint8)):((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256))",
      [ethereum.Value.fromTuple(playerStat), ethereum.Value.fromTuple(mod)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PlayerSheet__addModifierBonusResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  className(): string {
    let result = super.call("className", "className():(string)", []);

    return result[0].toString();
  }

  try_className(): ethereum.CallResult<string> {
    let result = super.tryCall("className", "className():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDamage(tokenId: BigInt): i32 {
    let result = super.call("getDamage", "getDamage(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_getDamage(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getDamage", "getDamage(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getGearBonus(tokenId: BigInt): PlayerSheet__getGearBonusResultValue0Struct {
    let result = super.call(
      "getGearBonus",
      "getGearBonus(uint256):((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<PlayerSheet__getGearBonusResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getGearBonus(
    tokenId: BigInt
  ): ethereum.CallResult<PlayerSheet__getGearBonusResultValue0Struct> {
    let result = super.tryCall(
      "getGearBonus",
      "getGearBonus(uint256):((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PlayerSheet__getGearBonusResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getHealth(tokenId: BigInt): i32 {
    let result = super.call("getHealth", "getHealth(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_getHealth(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getHealth", "getHealth(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  healthPerLevel(): i32 {
    let result = super.call("healthPerLevel", "healthPerLevel():(uint8)", []);

    return result[0].toI32();
  }

  try_healthPerLevel(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "healthPerLevel",
      "healthPerLevel():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playerGear(tokenId: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "playerGear",
      "playerGear(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_playerGear(tokenId: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playerGear",
      "playerGear(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playerStats(tokenId: BigInt): PlayerSheet__playerStatsResult {
    let result = super.call(
      "playerStats",
      "playerStats(uint256):(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new PlayerSheet__playerStatsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toBigInt()
    );
  }

  try_playerStats(
    tokenId: BigInt
  ): ethereum.CallResult<PlayerSheet__playerStatsResult> {
    let result = super.tryCall(
      "playerStats",
      "playerStats(uint256):(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PlayerSheet__playerStatsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toBigInt()
      )
    );
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrf(): Address {
    let result = super.call("vrf", "vrf():(address)", []);

    return result[0].toAddress();
  }

  try_vrf(): ethereum.CallResult<Address> {
    let result = super.tryCall("vrf", "vrf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _vrf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class EquipGearCall extends ethereum.Call {
  get inputs(): EquipGearCall__Inputs {
    return new EquipGearCall__Inputs(this);
  }

  get outputs(): EquipGearCall__Outputs {
    return new EquipGearCall__Outputs(this);
  }
}

export class EquipGearCall__Inputs {
  _call: EquipGearCall;

  constructor(call: EquipGearCall) {
    this._call = call;
  }

  get playerTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get gearTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get slot(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EquipGearCall__Outputs {
  _call: EquipGearCall;

  constructor(call: EquipGearCall) {
    this._call = call;
  }
}

export class FinalizePlayerCall extends ethereum.Call {
  get inputs(): FinalizePlayerCall__Inputs {
    return new FinalizePlayerCall__Inputs(this);
  }

  get outputs(): FinalizePlayerCall__Outputs {
    return new FinalizePlayerCall__Outputs(this);
  }
}

export class FinalizePlayerCall__Inputs {
  _call: FinalizePlayerCall;

  constructor(call: FinalizePlayerCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStats(): FinalizePlayerCallNewStatsStruct {
    return changetype<FinalizePlayerCallNewStatsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class FinalizePlayerCall__Outputs {
  _call: FinalizePlayerCall;

  constructor(call: FinalizePlayerCall) {
    this._call = call;
  }
}

export class FinalizePlayerCallNewStatsStruct extends ethereum.Tuple {
  get constitution(): i32 {
    return this[0].toI32();
  }

  get dexterity(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get wisdom(): i32 {
    return this[3].toI32();
  }

  get inteligence(): i32 {
    return this[4].toI32();
  }

  get charisma(): i32 {
    return this[5].toI32();
  }

  get luck(): i32 {
    return this[6].toI32();
  }

  get level(): i32 {
    return this[7].toI32();
  }

  get pointsToSpend(): i32 {
    return this[8].toI32();
  }

  get xp(): BigInt {
    return this[9].toBigInt();
  }
}

export class LevelUpCall extends ethereum.Call {
  get inputs(): LevelUpCall__Inputs {
    return new LevelUpCall__Inputs(this);
  }

  get outputs(): LevelUpCall__Outputs {
    return new LevelUpCall__Outputs(this);
  }
}

export class LevelUpCall__Inputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LevelUpCall__Outputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RemoveGearCall extends ethereum.Call {
  get inputs(): RemoveGearCall__Inputs {
    return new RemoveGearCall__Inputs(this);
  }

  get outputs(): RemoveGearCall__Outputs {
    return new RemoveGearCall__Outputs(this);
  }
}

export class RemoveGearCall__Inputs {
  _call: RemoveGearCall;

  constructor(call: RemoveGearCall) {
    this._call = call;
  }

  get playerTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveGearCall__Outputs {
  _call: RemoveGearCall;

  constructor(call: RemoveGearCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
